# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ErrorError(BaseModel):
    """
    ErrorError
    """ # noqa: E501
    error_key: Optional[StrictStr] = Field(default=None, alias="errorKey")
    status_code: StrictInt = Field(alias="statusCode")
    brief_summary: StrictStr = Field(alias="briefSummary")
    stack_trace: StrictStr = Field(alias="stackTrace")
    description_url: StrictStr = Field(alias="descriptionURL")
    log_id: Optional[StrictStr] = Field(default=None, alias="logId")
    __properties: ClassVar[List[str]] = ["errorKey", "statusCode", "briefSummary", "stackTrace", "descriptionURL", "logId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ErrorError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ErrorError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorKey": obj.get("errorKey"),
            "statusCode": obj.get("statusCode"),
            "briefSummary": obj.get("briefSummary"),
            "stackTrace": obj.get("stackTrace"),
            "descriptionURL": obj.get("descriptionURL"),
            "logId": obj.get("logId")
        })
        return _obj


