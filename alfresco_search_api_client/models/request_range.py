# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RequestRange(BaseModel):
    """
    Facet range
    """ # noqa: E501
    field: Optional[StrictStr] = Field(default=None, description="The name of the field to perform range")
    start: Optional[StrictStr] = Field(default=None, description="The start of the range")
    end: Optional[StrictStr] = Field(default=None, description="The end of the range")
    gap: Optional[StrictStr] = Field(default=None, description="Bucket size")
    hardend: Optional[StrictBool] = Field(default=None, description="If true means that the last bucket will end at “end” even if it is less than “gap” wide.")
    other: Optional[List[StrictStr]] = Field(default=None, description="before, after, between, non, all")
    include: Optional[List[StrictStr]] = Field(default=None, description="lower, upper, edge, outer, all")
    label: Optional[StrictStr] = Field(default=None, description="A label to include as a pivot reference")
    exclude_filters: Optional[List[StrictStr]] = Field(default=None, description="Filter queries to exclude when calculating statistics", alias="excludeFilters")
    __properties: ClassVar[List[str]] = ["field", "start", "end", "gap", "hardend", "other", "include", "label", "excludeFilters"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RequestRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RequestRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "field": obj.get("field"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "gap": obj.get("gap"),
            "hardend": obj.get("hardend"),
            "other": obj.get("other"),
            "include": obj.get("include"),
            "label": obj.get("label"),
            "excludeFilters": obj.get("excludeFilters")
        })
        return _obj


