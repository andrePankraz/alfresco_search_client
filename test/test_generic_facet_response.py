# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from alfresco_search_api_client.models.generic_facet_response import GenericFacetResponse

class TestGenericFacetResponse(unittest.TestCase):
    """GenericFacetResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GenericFacetResponse:
        """Test GenericFacetResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GenericFacetResponse`
        """
        model = GenericFacetResponse()
        if include_optional:
            return GenericFacetResponse(
                type = '',
                label = '',
                buckets = [
                    alfresco_search_api_client.models.generic_bucket.GenericBucket(
                        label = '', 
                        filter_query = '', 
                        display = alfresco_search_api_client.models.display.display(), 
                        metrics = [
                            alfresco_search_api_client.models.generic_metric.GenericMetric(
                                type = '', 
                                value = alfresco_search_api_client.models.value.value(), )
                            ], 
                        facets = [
                            None
                            ], 
                        bucket_info = alfresco_search_api_client.models.generic_bucket_bucket_info.GenericBucket_bucketInfo(
                            start = '', 
                            start_inclusive = True, 
                            end = '', 
                            end_inclusive = True, ), )
                    ]
            )
        else:
            return GenericFacetResponse(
        )
        """

    def testGenericFacetResponse(self):
        """Test GenericFacetResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
